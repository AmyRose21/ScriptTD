
-- Obtener referencias al jugador, su personaje, humanoide y la parte raíz
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local textChatService = game:GetService("TextChatService")

--------------------------------------------------------------------------------
-- Configuración GUI y creación del botón de habilidad
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))

local hoverButton = Instance.new("ImageButton")
hoverButton.Size = UDim2.new(0, 80, 0, 80)
hoverButton.Position = UDim2.new(0.5, -40, 0.9, 0)
hoverButton.BackgroundTransparency = 1
hoverButton.Image = "rbxassetid://127738269107159"
hoverButton.Parent = screenGui

-- Botón circular
local uiCorner = Instance.new("UICorner", hoverButton)
uiCorner.CornerRadius = UDim.new(1, 0)

hoverButton.Draggable = true
hoverButton.Selectable = true
hoverButton.Active = true

--------------------------------------------------------------------------------
-- Animación para indicar modo impulso activo
local hoverAnimation = Instance.new("Animation")
hoverAnimation.AnimationId = "rbxassetid://17172142074"
local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
local hoverTrack = animator:LoadAnimation(hoverAnimation)

--------------------------------------------------------------------------------
-- Sonido para la habilidad
local hoverSound = Instance.new("Sound")
hoverSound.SoundId = "rbxassetid://4454997815"
hoverSound.Looped = true
hoverSound.Volume = 2
hoverSound.Parent = workspace

--------------------------------------------------------------------------------
-- Parámetros del impulso vertical y duración máxima del modo impulso
local boostWindow = 5 -- Duración máxima en segundos durante la cual se permite el impulso
local boostPower = 50 -- Potencia del impulso hacia arriba

-- Variables internas para controlar estado de la habilidad:
local isBoostingActive = false -- Indica si está activa la "ventana" de impulso
local boostBV = nil            -- BodyVelocity actual (para empuje vertical)
local boostEndTime = 0         -- Momento en que finalizará automáticamente la ventana de impulso

-- CAMBIO: Definimos las variables y lógica del enfriamiento
local cooldown = 30    -- Tiempo de enfriamiento en segundos
local isOnCooldown = false -- Bandera para saber si la habilidad está en recarga

--------------------------------------------------------------------------------
-- Función para iniciar o reanudar el empuje hacia arriba mientras se mantenga
-- presionado el botón
local function applyBoost()
    if not isBoostingActive then return end -- Solo aplica si la ventana está activa

    if not boostBV then 
        boostBV = Instance.new("BodyVelocity")
        boostBV.Velocity = Vector3.new(0, boostPower, 0)
        boostBV.MaxForce = Vector3.new(0, 10000, 0)
        boostBV.Parent = rootPart
    end
end

-- Función para detener temporalmente el empuje (al soltar botón)
local function stopApplyingBoost()
    if boostBV then 
        boostBV:Destroy()
        boostBV = nil 
    end
end

--------------------------------------------------------------------------------
-- Función que inicia la ventana de tiempo de la habilidad
local function startBoostMode()
    -- CAMBIO: Comprobamos si está en cooldown
    if isOnCooldown then
        -- Aquí podríamos mostrar un mensaje en pantalla o un print
        print("Habilidad en enfriamiento. Intenta más tarde.")
        return
    end

    if isBoostingActive then return end

    isBoostingActive = true

    -- Inicia animación y sonido una sola vez por ventana activa
    hoverTrack:Play()
    hoverSound:Play()

    -- Mensaje aleatorio al chat al activar habilidad
    local mensajesPosibles = {"💧☟✌👎⚐🕈📂", "💧☟✌👎⚐🕈📄", "💧☟✌👎⚐🕈🗏"}
    local mensajeAleatorio = mensajesPosibles[math.random(#mensajesPosibles)]
    local rbxGeneralChannel = textChatService.TextChannels:WaitForChild("RBXGeneral")
    rbxGeneralChannel:SendAsync(mensajeAleatorio)

    -- Establece cuándo terminará automáticamente la ventana de impulso
    boostEndTime = tick() + boostWindow

    -- Finaliza automáticamente tras boostWindow segundos
    delay(boostWindow, function()
        if isBoostingActive then 
            endBoostMode() 
        end 
    end)
end

--------------------------------------------------------------------------------
-- Función que finaliza completamente la ventana de tiempo de la habilidad
function endBoostMode()
    if not isBoostingActive then return end

    isBoostingActive = false

    stopApplyingBoost() -- Asegura eliminar cualquier empuje restante

    if hoverTrack.IsPlaying then hoverTrack:Stop() end
    if hoverSound.IsPlaying then hoverSound:Stop() end
	local mensajesPosibles = { "☞✋☠✋💧☟📂", "☞✋☠✋💧☟📄", "☞✋☠✋💧☟🗏" }
    local mensajeAleatorio = mensajesPosibles[math.random(1, #mensajesPosibles)]

    local rbxGeneralChannel = textChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")
    rbxGeneralChannel:SendAsync(mensajeAleatorio)
    -- CAMBIO: Iniciamos el cooldown al terminar la habilidad
    if not isOnCooldown then
        isOnCooldown = true
        print("Habilidad en recarga de " .. cooldown .. " segundos.")

        delay(cooldown, function()
            isOnCooldown = false
            print("Habilidad lista para usarse nuevamente.")
        end)
    end
end

--------------------------------------------------------------------------------
-- Eventos del botón

-- Al presionar botón inicia/reanuda empuje hacia arriba
hoverButton.MouseButton1Down:Connect(function()
    -- Si no está activa la ventana, la iniciamos
    if not isBoostingActive then
        startBoostMode()
    end

    -- Aplica empuje inmediatamente al presionar (si la ventana está activa)
    applyBoost()
end)

-- Al soltar botón detiene temporalmente empuje (pero no termina la ventana)
hoverButton.MouseButton1Up:Connect(function()
    stopApplyingBoost()
end)

--------------------------------------------------------------------------------
-- Termina automáticamente al tocar suelo o morir/reiniciar personaje
humanoid.StateChanged:Connect(function(oldState, newState)
    if newState == Enum.HumanoidStateType.Landed 
        or newState == Enum.HumanoidStateType.Dead 
        or newState == Enum.HumanoidStateType.GettingUp then

        endBoostMode()
    end
end)
